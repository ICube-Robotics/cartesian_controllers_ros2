// Copyright 2023, ICube Laboratory, University of Strasbourg
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef CARTESIAN_VELOCITY_CONTROLLER__CARTESIAN_VELOCITY_CONTROLLER_HPP_
#define CARTESIAN_VELOCITY_CONTROLLER__CARTESIAN_VELOCITY_CONTROLLER_HPP_

#include <Eigen/Geometry>

#include <memory>
#include <string>
#include <vector>

#include "controller_interface/chainable_controller_interface.hpp"
#include "cartesian_velocity_controller/visibility_control.h"
#include "geometry_msgs/msg/twist_stamped.hpp"
#include "realtime_tools/realtime_buffer.h"

// auto-generated by generate_parameter_library
#include "cartesian_velocity_controller_parameters.hpp"

// kinematics plugins
#include "kinematics_interface/kinematics_interface.hpp"
#include "pluginlib/class_loader.hpp"

/**
 * CartesianVelocityController is a chainable controller that converts end-effector
 * twist commands to joint velocity commands using the logic implemented by the
 * kinematics interface plugin.
 */

namespace cartesian_velocity_controller
{
using CallbackReturn = controller_interface::CallbackReturn;
using DataType = geometry_msgs::msg::TwistStamped;

class CartesianVelocityController : public controller_interface::ChainableControllerInterface
{
public:
  CARTESIAN_VELOCITY_CONTROLLER_PUBLIC
  CallbackReturn on_init() override;

  CARTESIAN_VELOCITY_CONTROLLER_PUBLIC
  controller_interface::InterfaceConfiguration command_interface_configuration() const override;

  CARTESIAN_VELOCITY_CONTROLLER_PUBLIC
  controller_interface::InterfaceConfiguration state_interface_configuration() const override;

  CARTESIAN_VELOCITY_CONTROLLER_PUBLIC
  CallbackReturn on_configure(
    const rclcpp_lifecycle::State & previous_state) override;

  CARTESIAN_VELOCITY_CONTROLLER_PUBLIC
  CallbackReturn on_activate(
    const rclcpp_lifecycle::State & previous_state) override;

  CARTESIAN_VELOCITY_CONTROLLER_PUBLIC
  CallbackReturn on_deactivate(
    const rclcpp_lifecycle::State & previous_state) override;

  // CARTESIAN_VELOCITY_CONTROLLER_PUBLIC
  // controller_interface::CallbackReturn on_cleanup(
  //   const rclcpp_lifecycle::State & previous_state) override;

  // CARTESIAN_VELOCITY_CONTROLLER_PUBLIC
  // controller_interface::CallbackReturn on_error(
  //   const rclcpp_lifecycle::State & previous_state) override;

  CARTESIAN_VELOCITY_CONTROLLER_PUBLIC
  bool on_set_chained_mode(bool chained_mode) override;

  CARTESIAN_VELOCITY_CONTROLLER_PUBLIC
  controller_interface::return_type update_and_write_commands(
    const rclcpp::Time & time,
    const rclcpp::Duration & period) override;

protected:
  std::vector<hardware_interface::CommandInterface> on_export_reference_interfaces() override;

  controller_interface::return_type update_reference_from_subscribers() override;

  std::shared_ptr<ParamListener> param_listener_;
  Params params_;

  realtime_tools::RealtimeBuffer<std::shared_ptr<DataType>> rt_buffer_ptr_;
  rclcpp::Subscription<DataType>::SharedPtr twist_cmd_sub_;

  std::vector<std::string> reference_joint_names_;
  std::vector<std::string> reference_interface_names_;
  std::vector<std::string> command_joint_names_;
  std::vector<std::string> command_interface_names_;
  std::vector<std::string> state_interface_names_;

  Eigen::VectorXd joint_positions_, joint_velocities_, cart_velocities_;

  // Kinematics interface plugin loader
  std::shared_ptr<pluginlib::ClassLoader<kinematics_interface::KinematicsInterface>>
  kinematics_loader_;
  std::unique_ptr<kinematics_interface::KinematicsInterface> kinematics_;
};

}  // namespace cartesian_velocity_controller

#endif  // CARTESIAN_VELOCITY_CONTROLLER__CARTESIAN_VELOCITY_CONTROLLER_HPP_
